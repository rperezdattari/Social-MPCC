#!/usr/bin/env python
PACKAGE = "lmpcc"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

# ==================================== Parameters for the solver =====================================================

solv_constr = gen.add_group("Solver Stage Cost Parameters", "solver_constraints")
solv_constr.add("Wcontour",      double_t, 1, "Contour error weight", 0.03, 0.0, 100.0)
solv_constr.add("Wlag",          double_t, 1, "Lag error weight", .1, 0.0, 100.0)
solv_constr.add("Ka",            double_t, 1, "Acceleration weight", 0.01, 0.0, 100.0)
solv_constr.add("Kalpha",            double_t, 1, "Angular Acceleration weight", 0.2, 0.0, 100.0)
solv_constr.add("Kdelta",        double_t, 1, "Angular velocity weight", 0.05, 0.0, 100.0)
solv_constr.add("Wlateral",            double_t, 1, "Lateral weight", 0.5, 0.0, 100.0)
solv_constr.add("Wslack",            double_t, 1, "Weight on slack variable", 10000.0, 0.0, 10000.0)
solv_constr.add("Wrepulsive",            double_t, 1, "Weight on repulsive force", 0.0001, 0.0, 50.0)
solv_constr.add("Kv",            double_t, 1, "Velocity weight",0.3, 0.0, 100.0)
solv_constr.add("vRef",          double_t, 1, "Reference velocity", 5.0, 0.0, 5.0)
solv_constr.add("ini_v0",        double_t, 1, "Initial velocity", 0.0, 0.0, 10.0)

# ==================================== Parameters for influencing the scenario =====================================================
limits = gen.add_group("Scenario Options", "options")
limits.add("reset_x",     double_t,   1, "x after resetting", 10.0, -1000.0, 1000.0)
limits.add("reset_y",     double_t,   1, "y after resetting", 0.0, -1000.0, 1000.0)

# ==================================== Parameters for limits enforcement =====================================================
limits = gen.add_group("Controller Options", "options")
limits.add("enable_output",     bool_t,   0, "Enable/Disable control output", False)
limits.add("reset_world",     bool_t,   0, "Reset simulation", False)
limits.add("plan",     bool_t,   0, "Start LMPCC", False)

# ==================================== Parameters for search window =====================================================
search_window = gen.add_group("Search Window Options", "options")
search_window.add("window_size",     double_t,   1, "Seacrh window size", 3.0, 0.0, 10.0)
search_window.add("n_search_points", int_t,   1, "Number of seacrh points", 30, 1, 100)
exit(gen.generate(PACKAGE, "lmpcc", "PredictiveController"))
